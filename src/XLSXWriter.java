import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.xssf.usermodel.*;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.*;

/**
 * Created by TTY on 2016/8/13.
 */
public class XLSXWriter {
    AnalyzeMission analyzeMission;
    MessageType[] messageTypeLib;
    //Map<String, Integer> shownRes;
    //Map<String, Integer> bothRes;
    int[] bothTotal, shownTotal;
    int[][] relationShip;
    private int[] lightRed = new int[]{0xff, 0x59, 0x59};

//    public XLSXWriter(MessageType[] messageTypeLib, int[] bothTotal, int[] shownTotal, int[][] relationShip) {
//        this.messageTypeLib = messageTypeLib;
//        this.bothTotal = bothTotal;
//        this.shownTotal = shownTotal;
//        this.relationShip = relationShip;
//    }


    public XLSXWriter(AnalyzeMission analyzeMission) {
        this.analyzeMission = analyzeMission;
        this.messageTypeLib = analyzeMission.messageTypeLib;
        this.bothTotal = analyzeMission.bothTotal;
        this.shownTotal = analyzeMission.shownTotal;
        this.relationShip = analyzeMission.relationShip;
    }

    public void writeToFile(String filePath) throws Exception {
        String excelFileName = filePath + "/AutoGeneratedResult.xlsx";
        FileOutputStream fileOut;
        try {
            fileOut = new FileOutputStream(excelFileName);
        } catch (FileNotFoundException e) {
            System.out.println("FilePath not valid.");
            throw e;
        }

        XSSFWorkbook wb = new XSSFWorkbook();
        generateSheet1(wb);
        generateSheet2(wb);
        generateSheet3(wb);

        wb.write(fileOut);
        fileOut.flush();
        fileOut.close();
    }

    private void generateSheet1(XSSFWorkbook wb) {
        //Sheet2 shows the very general information of the collected data
        XSSFSheet sheet = wb.createSheet("sheet1");

        XSSFRow row0 = sheet.createRow(0);
        row0.createCell(0).setCellValue("Nationality/Country:");
        row0.createCell(1).setCellValue(analyzeMission.countryCode);

        XSSFRow row1 = sheet.createRow(1);
        row1.createCell(0).setCellValue("After:");
        row1.createCell(1).setCellValue(AnalyzeMission.sdf.format(analyzeMission.startTime));

        XSSFRow row2 = sheet.createRow(2);
        row2.createCell(0).setCellValue("Before:");
        row2.createCell(1).setCellValue(AnalyzeMission.sdf.format(new Date(analyzeMission.startTime.getTime() + ((long) analyzeMission.dataSetSize) * 24 * 60 * 60 * 1000)));

        XSSFRow row3 = sheet.createRow(3);
        row3.createCell(0).setCellValue("Total Sessions:");
        row3.createCell(1).setCellValue(analyzeMission.totalSessionNum);

        XSSFRow row4 = sheet.createRow(4);
        row4.createCell(0).setCellValue("Total Compile Events:");
        row4.createCell(1).setCellValue(analyzeMission.totalCompileEventNum);

        int S = 0, B = 0;
        for (int i = 0; i < messageTypeLib.length; i++) {
            S += shownTotal[i];
            B += bothTotal[i];
        }
        XSSFRow row5 = sheet.createRow(5);
        row5.createCell(0).setCellValue("Total Shown:");
        row5.createCell(1).setCellValue(S);

        XSSFRow row6 = sheet.createRow(6);
        row6.createCell(0).setCellValue("Total Both:");
        row6.createCell(1).setCellValue(B);
    }

    private void generateSheet2(XSSFWorkbook wb) {
        //Sheet2 shows the general information of the collected errors
        XSSFSheet sheet = wb.createSheet("sheet2");

        XSSFRow headerRow = sheet.createRow(0);
        headerRow.createCell(0).setCellValue("ErrorType");
        headerRow.createCell(1).setCellValue("ErrorDescription");
        headerRow.createCell(2).setCellValue("Shown");
        headerRow.createCell(3).setCellValue("Both");
        headerRow.createCell(4).setCellValue("Si/S");
        headerRow.createCell(5).setCellValue("Bi/B");
        headerRow.createCell(6).setCellValue("Si/Bi");
        headerRow.createCell(7).setCellValue("(Si/S)/(Bi/B)");
        headerRow.createCell(8).setCellValue("Si/S-Bi/B");
        headerRow.createCell(9).setCellValue("RANKs");
        headerRow.createCell(10).setCellValue("RANKb");
        headerRow.createCell(11).setCellValue("RANKs-RANKb");

        int S = 0, B = 0;
        for (int i = 0; i < messageTypeLib.length; i++) {
            S += shownTotal[i];
            B += bothTotal[i];
        }

        int[] shownRank = new int[messageTypeLib.length];
        int[] bothRank = new int[messageTypeLib.length];

        List<Map.Entry<Integer, Integer>> shownList = new LinkedList<>();
        List<Map.Entry<Integer, Integer>> bothList = new LinkedList<>();

        for (int i = 0; i < messageTypeLib.length; i++) {
            shownList.add(new AbstractMap.SimpleEntry<>(i, shownTotal[i]));
            bothList.add(new AbstractMap.SimpleEntry<>(i, bothTotal[i]));
        }
        Collections.sort(shownList, new Comparator<Map.Entry<Integer, Integer>>() {
            @Override
            public int compare(Map.Entry<Integer, Integer> o1, Map.Entry<Integer, Integer> o2) {
                if (o1.getValue() < o2.getValue()) {
                    return 1;
                } else if (o1.getValue() > o2.getValue()) {
                    return -1;
                }
                return 0;
            }
        });
        Collections.sort(bothList, new Comparator<Map.Entry<Integer, Integer>>() {
            @Override
            public int compare(Map.Entry<Integer, Integer> o1, Map.Entry<Integer, Integer> o2) {
                if (o1.getValue() < o2.getValue()) {
                    return 1;
                } else if (o1.getValue() > o2.getValue()) {
                    return -1;
                }
                return 0;
            }
        });
        int currentRank = 1;
        int currentValue = shownList.get(0).getValue();
        for (int i = 0; i < shownList.size(); i++) {
            if (shownList.get(i).getValue() != currentValue) {
                currentRank = i + 1;
                currentValue = shownList.get(i).getValue();
            }
            shownRank[shownList.get(i).getKey()] = currentRank;
        }
        currentRank = 1;
        currentValue = bothList.get(0).getValue();
        for (int i = 0; i < bothList.size(); i++) {
            if (bothList.get(i).getValue() != currentValue) {
                currentRank = i + 1;
                currentValue = bothList.get(i).getValue();
            }
            bothRank[bothList.get(i).getKey()] = currentRank;
        }


        for (int i = 0; i < messageTypeLib.length; i++) {
            XSSFRow row = sheet.createRow(i + 1);

            XSSFCell cell0 = row.createCell(0);
            cell0.setCellType(XSSFCell.CELL_TYPE_STRING);
            cell0.setCellValue(messageTypeLib[i].category + "." + messageTypeLib[i].type + (messageTypeLib[i].subtype == 0 ? "" : "." + messageTypeLib[i].subtype));

            XSSFCell cell1 = row.createCell(1);
            cell0.setCellType(XSSFCell.CELL_TYPE_STRING);
            cell1.setCellValue(messageTypeLib[i].description);

            //Si
            int v2 = shownTotal[i];
            XSSFCell cell2 = row.createCell(2);
            cell2.setCellValue(v2);

            //Bi
            int v3 = bothTotal[i];
            XSSFCell cell3 = row.createCell(3);
            cell3.setCellValue(v3);

            //Si/S
            double v4 = (S != 0) ? ((double) shownTotal[i] / S) : 0;
            XSSFCell cell4 = row.createCell(4);
            cell4.setCellValue(v4);

            //Bi/B
            double v5 = (B != 0) ? ((double) bothTotal[i] / B) : 0;
            XSSFCell cell5 = row.createCell(5);
            cell5.setCellValue(v5);

            //Si/Bi
            double v6 = (v3 != 0) ? ((double) v2 / v3) : 0;
            XSSFCell cell6 = row.createCell(6);
            cell6.setCellValue(v6);

            //(Si/S)/(Bi/B)
            double v7 = (v5 != 0) ? (v4 / v5) : 0;
            XSSFCell cell7 = row.createCell(7);
            cell7.setCellValue(v7);

            //Si/S-Bi/B
            double v8 = v4 - v5;
            XSSFCell cell8 = row.createCell(8);
            cell8.setCellValue(v8);

            //RANKs
            int v9 = shownRank[i];
            XSSFCell cell9 = row.createCell(9);
            cell9.setCellValue(v9);

            //RANKb
            int v10 = bothRank[i];
            XSSFCell cell10 = row.createCell(10);
            cell10.setCellValue(v10);

            //RANKs-RANKb
            int v11 = v9 - v10;
            XSSFCell cell11 = row.createCell(11);
            cell11.setCellValue(v11);
        }
    }

    private void generateSheet3(XSSFWorkbook wb) {
        //Sheet3 shows the relationship between the errors
        XSSFSheet sheet = wb.createSheet("sheet3");

        XSSFRow row0 = sheet.createRow(0);
        for (int i = 0; i < messageTypeLib.length; i++) {
            MessageType messageType = messageTypeLib[i];
            row0.createCell(i + 1).setCellValue(messageType.category + "." + messageType.type + ((messageType.subtype != 0) ? ("." + messageType.subtype) : ("")));
        }
        row0.createCell(messageTypeLib.length + 1).setCellValue("UDFD");

        XSSFRow rows[] = new XSSFRow[messageTypeLib.length + 1];
        for (int i = 0; i < rows.length; i++) {
            rows[i] = sheet.createRow(i + 1);
            if (i != rows.length - 1) {
                MessageType messageType = messageTypeLib[i];
                rows[i].createCell(0).setCellValue(messageType.category + "." + messageType.type + ((messageType.subtype != 0) ? ("." + messageType.subtype) : ("")));
            } else {
                rows[i].createCell(0).setCellValue("UDFD");
            }
        }

        int maxRelationship = 0;
        for (int i = 0; i < relationShip.length; i++) {
            for (int j = 0; j < relationShip[i].length; j++) {
                if (relationShip[i][j] > maxRelationship) {
                    maxRelationship = relationShip[i][j];
                }
            }
        }

        for (int i = 0; i < relationShip.length; i++) {
            for (int j = 0; j < relationShip[i].length; j++) {
                XSSFCell cell = rows[i].createCell(j + 1);
                cell.setCellValue(relationShip[i][j]);

                double rate = (double) relationShip[i][j] / maxRelationship;
                byte[] foreColor = new byte[3];
                foreColor[0] = (byte) (rate * lightRed[0] + (1 - rate) * 0xff);
                foreColor[1] = (byte) (rate * lightRed[1] + (1 - rate) * 0xff);
                foreColor[2] = (byte) (rate * lightRed[2] + (1 - rate) * 0xff);
                XSSFCellStyle style = wb.createCellStyle();
                style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                style.setFillForegroundColor(new XSSFColor(foreColor));
                cell.setCellStyle(style);
            }
        }
    }

}
